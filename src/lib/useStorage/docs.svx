---
title: useStorage
description: Reactive Storage. Uses localStorage by default, other storage sources be specified via third argument.
---

## Usage

```ts
import { useStorage } from 'svelte-borya'

// bind object
 const state = useStorage('my-store', { greeting: 'Hello', name: 'SvelteBorya' });

// bind boolean
const flag = useStorage('my-flag', true)
console.log(flag.value) // true 

// bind number
const count = useStorage('my-count', 0)
console.log(count.value) // 0

// bind string with SessionStorage
const id = useStorage('my-id', 'some-string-id', sessionStorage)
```

## Parameters

| Name       | Type       |  Default |
| :--------- | :--------- | :---------- |
| key        | `string`     | `-`          |
| defaults   | `MaybeGetter<T>` | `-`       |
| storage    | `StorageLike` | `localStorage` |
| options    | `UseStorageOptions<T>` | `{}` |

## Options

```typescript
export interface UseStorageOptions<T> extends ConfigurableEventFilter, ConfigurableWindow {
  listenToStorageChanges?: boolean;
  writeDefaults?: boolean;
  mergeDefaults?: boolean | ((storageValue: T, defaults: T) => T);
  serializer?: Serializer<T>;
  onError?: (error: unknown) => void;
  shallow?: boolean;
  initOnMounted?: boolean;
}
```